{
    "info": {
        "name": "Knowledge Graph API",
        "description": "API tests for knowledge graph operations",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "1. Register Entity Types",
            "item": [
                {
                    "name": "Register Person Type",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Registering Person type...');"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Accept both 200 and 409 as success (type already exists)",
                                    "pm.test('Status code is acceptable', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 409]);",
                                    "});",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test('Entity type is registered successfully', function () {",
                                    "        var jsonData = pm.response.json();",
                                    "        pm.expect(jsonData).to.have.property('message');",
                                    "        pm.expect(jsonData.message).to.include('Person');",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"name\": \"Person\", \"description\": \"A person entity\", \"properties\": {\"name\": {\"type\": \"string\", \"required\": true}, \"age\": {\"type\": \"integer\", \"required\": true}, \"occupation\": {\"type\": \"string\", \"required\": false}}, \"indexes\": [\"name\", \"age\"]}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/entity-types",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "entity-types"
                            ]
                        }
                    }
                },
                {
                    "name": "Register Company Type",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Registering Company type...');"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Accept both 200 and 409 as success (type already exists)",
                                    "pm.test('Status code is acceptable', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 409]);",
                                    "});",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test('Entity type is registered successfully', function () {",
                                    "        var jsonData = pm.response.json();",
                                    "        pm.expect(jsonData).to.have.property('message');",
                                    "        pm.expect(jsonData.message).to.include('Company');",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"name\": \"Company\", \"description\": \"A company entity\", \"properties\": {\"name\": {\"type\": \"string\", \"required\": true}, \"founded\": {\"type\": \"integer\", \"required\": true}, \"industry\": {\"type\": \"string\", \"required\": false}}, \"indexes\": [\"name\", \"founded\"]}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/entity-types",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "entity-types"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "2. Register Relation Types",
            "item": [
                {
                    "name": "Register WORKS_AT Type",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Registering WORKS_AT type...');"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Accept both 200 and 409 as success (type already exists)",
                                    "pm.test('Status code is acceptable', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 409]);",
                                    "});",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test('Relation type is registered successfully', function () {",
                                    "        var jsonData = pm.response.json();",
                                    "        pm.expect(jsonData).to.have.property('message');",
                                    "        pm.expect(jsonData.message).to.include('WORKS_AT');",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"name\": \"WORKS_AT\", \"description\": \"A relationship between a person and a company\", \"properties\": {\"role\": {\"type\": \"string\", \"required\": true}, \"start_date\": {\"type\": \"integer\", \"required\": true}}, \"indexes\": [\"role\", \"start_date\"], \"from_types\": [\"Person\"], \"to_types\": [\"Company\"]}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/relation-types",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "relation-types"
                            ]
                        }
                    }
                },
                {
                    "name": "Register KNOWS Type",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Registering KNOWS type...');"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Accept both 200 and 409 as success (type already exists)",
                                    "pm.test('Status code is acceptable', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 409]);",
                                    "});",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test('Relation type is registered successfully', function () {",
                                    "        var jsonData = pm.response.json();",
                                    "        pm.expect(jsonData).to.have.property('message');",
                                    "        pm.expect(jsonData.message).to.include('KNOWS');",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"name\": \"KNOWS\", \"description\": \"A relationship between two people\", \"properties\": {\"since\": {\"type\": \"integer\", \"required\": true}}, \"indexes\": [\"since\"], \"from_types\": [\"Person\"], \"to_types\": [\"Person\"]}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/relation-types",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "relation-types"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "3. Create Entities",
            "item": [
                {
                    "name": "Create Alice",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Creating Alice...');",
                                    "// Clear any existing alice_id to ensure we're starting fresh",
                                    "pm.environment.unset('alice_id');"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is successful",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "// Verify entity is created with correct properties",
                                    "pm.test('Entity is created with correct properties', function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.entity_type).to.equal('Person');",
                                    "    pm.expect(jsonData.properties.name).to.equal('Alice Smith');",
                                    "    pm.expect(jsonData.properties.age).to.equal(30);",
                                    "    pm.expect(jsonData.properties.occupation).to.equal('Software Engineer');",
                                    "    // Set the alice_id variable",
                                    "    if (jsonData.id) {",
                                    "        pm.environment.set('alice_id', jsonData.id);",
                                    "        console.log('Successfully set alice_id to:', jsonData.id);",
                                    "        // Verify the variable was set",
                                    "        var storedId = pm.environment.get('alice_id');",
                                    "        console.log('Verified stored alice_id:', storedId);",
                                    "    } else {",
                                    "        console.error('No ID in response:', jsonData);",
                                    "    }",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"entity_type\": \"Person\", \"properties\": {\"name\": \"Alice Smith\", \"age\": 30, \"occupation\": \"Software Engineer\"}}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/entities",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "entities"
                            ]
                        }
                    }
                },
                {
                    "name": "Create Bob",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Creating Bob...');",
                                    "// Clear any existing bob_id to ensure we're starting fresh",
                                    "pm.environment.unset('bob_id');"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is successful",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "// Verify entity is created with correct properties",
                                    "pm.test('Entity is created with correct properties', function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.entity_type).to.equal('Person');",
                                    "    pm.expect(jsonData.properties.name).to.equal('Bob Johnson');",
                                    "    pm.expect(jsonData.properties.age).to.equal(35);",
                                    "    pm.expect(jsonData.properties.occupation).to.equal('Data Scientist');",
                                    "    // Set the bob_id variable",
                                    "    if (jsonData.id) {",
                                    "        pm.environment.set('bob_id', jsonData.id);",
                                    "        console.log('Successfully set bob_id to:', jsonData.id);",
                                    "        // Verify the variable was set",
                                    "        var storedId = pm.environment.get('bob_id');",
                                    "        console.log('Verified stored bob_id:', storedId);",
                                    "    } else {",
                                    "        console.error('No ID in response:', jsonData);",
                                    "    }",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"entity_type\": \"Person\", \"properties\": {\"name\": \"Bob Johnson\", \"age\": 35, \"occupation\": \"Data Scientist\"}}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/entities",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "entities"
                            ]
                        }
                    }
                },
                {
                    "name": "Create TechCorp",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Creating TechCorp...');",
                                    "// Clear any existing tech_corp_id to ensure we're starting fresh",
                                    "pm.environment.unset('tech_corp_id');"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is successful",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "// Verify entity is created with correct properties",
                                    "pm.test('Entity is created with correct properties', function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.entity_type).to.equal('Company');",
                                    "    pm.expect(jsonData.properties.name).to.equal('TechCorp');",
                                    "    pm.expect(jsonData.properties.founded).to.equal(2010);",
                                    "    pm.expect(jsonData.properties.industry).to.equal('Technology');",
                                    "    // Set the tech_corp_id variable",
                                    "    if (jsonData.id) {",
                                    "        pm.environment.set('tech_corp_id', jsonData.id);",
                                    "        console.log('Successfully set tech_corp_id to:', jsonData.id);",
                                    "        // Verify the variable was set",
                                    "        var storedId = pm.environment.get('tech_corp_id');",
                                    "        console.log('Verified stored tech_corp_id:', storedId);",
                                    "    } else {",
                                    "        console.error('No ID in response:', jsonData);",
                                    "    }",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"entity_type\": \"Company\", \"properties\": {\"name\": \"TechCorp\", \"founded\": 2010, \"industry\": \"Technology\"}}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/entities",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "entities"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "4. Create Relations",
            "item": [
                {
                    "name": "Alice Works at TechCorp",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Creating Alice works at TechCorp relation...');",
                                    "var aliceId = pm.environment.get('alice_id');",
                                    "var techCorpId = pm.environment.get('tech_corp_id');",
                                    "console.log('alice_id:', aliceId);",
                                    "console.log('tech_corp_id:', techCorpId);",
                                    "if (!aliceId) {",
                                    "    console.error('alice_id is not set! Please run the Create Alice request first.');",
                                    "    return;",
                                    "}",
                                    "if (!techCorpId) {",
                                    "    console.error('tech_corp_id is not set! Please run the Create TechCorp request first.');",
                                    "    return;",
                                    "}",
                                    "// Construct and set the request body with actual values",
                                    "var requestBody = {",
                                    "    relation_type: \"WORKS_AT\",",
                                    "    from_entity: aliceId,",
                                    "    to_entity: techCorpId,",
                                    "    properties: {",
                                    "        role: \"Senior Engineer\",",
                                    "        start_date: 2020",
                                    "    }",
                                    "};",
                                    "console.log('Request body:', JSON.stringify(requestBody, null, 2));",
                                    "pm.request.body.raw = JSON.stringify(requestBody);",
                                    "// Log the actual request being sent",
                                    "console.log('Final request body:', pm.request.body.raw);"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is successful",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "// Verify relation is created with correct properties",
                                    "pm.test('Relation is created with correct properties', function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.relation_type).to.equal('WORKS_AT');",
                                    "    pm.expect(jsonData.from_entity).to.equal(pm.environment.get('alice_id'));",
                                    "    pm.expect(jsonData.to_entity).to.equal(pm.environment.get('tech_corp_id'));",
                                    "    pm.expect(jsonData.properties.role).to.equal('Senior Engineer');",
                                    "    pm.expect(jsonData.properties.start_date).to.equal(2020);",
                                    "    // Set the relation ID for future use",
                                    "    if (jsonData.id) {",
                                    "        pm.environment.set('alice_works_id', jsonData.id);",
                                    "        console.log('Successfully set alice_works_id to:', jsonData.id);",
                                    "        // Verify the variable was set",
                                    "        var storedId = pm.environment.get('alice_works_id');",
                                    "        console.log('Verified stored alice_works_id:', storedId);",
                                    "    } else {",
                                    "        console.error('No ID in response:', jsonData);",
                                    "    }",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/relations",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "relations"
                            ]
                        }
                    }
                },
                {
                    "name": "Bob Works at TechCorp",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Creating Bob works at TechCorp relation...');",
                                    "var bobId = pm.environment.get('bob_id');",
                                    "var techCorpId = pm.environment.get('tech_corp_id');",
                                    "console.log('bob_id:', bobId);",
                                    "console.log('tech_corp_id:', techCorpId);",
                                    "if (!bobId) {",
                                    "    console.error('bob_id is not set! Please run the Create Bob request first.');",
                                    "    return;",
                                    "}",
                                    "if (!techCorpId) {",
                                    "    console.error('tech_corp_id is not set! Please run the Create TechCorp request first.');",
                                    "    return;",
                                    "}",
                                    "// Construct and set the request body with actual values",
                                    "var requestBody = {",
                                    "    relation_type: \"WORKS_AT\",",
                                    "    from_entity: bobId,",
                                    "    to_entity: techCorpId,",
                                    "    properties: {",
                                    "        role: \"Lead Data Scientist\",",
                                    "        start_date: 2019",
                                    "    }",
                                    "};",
                                    "console.log('Request body:', JSON.stringify(requestBody, null, 2));",
                                    "pm.request.body.raw = JSON.stringify(requestBody);"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is successful",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "// Verify relation is created with correct properties",
                                    "pm.test('Relation is created with correct properties', function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.relation_type).to.equal('WORKS_AT');",
                                    "    pm.expect(jsonData.from_entity).to.equal(pm.environment.get('bob_id'));",
                                    "    pm.expect(jsonData.to_entity).to.equal(pm.environment.get('tech_corp_id'));",
                                    "    pm.expect(jsonData.properties.role).to.equal('Lead Data Scientist');",
                                    "    pm.expect(jsonData.properties.start_date).to.equal(2019);",
                                    "    // Set the relation ID for future use",
                                    "    if (jsonData.id) {",
                                    "        pm.environment.set('bob_works_id', jsonData.id);",
                                    "        console.log('Successfully set bob_works_id to:', jsonData.id);",
                                    "        // Verify the variable was set",
                                    "        var storedId = pm.environment.get('bob_works_id');",
                                    "        console.log('Verified stored bob_works_id:', storedId);",
                                    "    } else {",
                                    "        console.error('No ID in response:', jsonData);",
                                    "    }",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/relations",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "relations"
                            ]
                        }
                    }
                },
                {
                    "name": "Alice Knows Bob",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Creating Alice knows Bob relation...');",
                                    "var aliceId = pm.environment.get('alice_id');",
                                    "var bobId = pm.environment.get('bob_id');",
                                    "console.log('alice_id:', aliceId);",
                                    "console.log('bob_id:', bobId);",
                                    "if (!aliceId) {",
                                    "    console.error('alice_id is not set! Please run the Create Alice request first.');",
                                    "    return;",
                                    "}",
                                    "if (!bobId) {",
                                    "    console.error('bob_id is not set! Please run the Create Bob request first.');",
                                    "    return;",
                                    "}",
                                    "// Construct and set the request body with actual values",
                                    "var requestBody = {",
                                    "    relation_type: \"KNOWS\",",
                                    "    from_entity: aliceId,",
                                    "    to_entity: bobId,",
                                    "    properties: {",
                                    "        since: 2021",
                                    "    }",
                                    "};",
                                    "console.log('Request body:', JSON.stringify(requestBody, null, 2));",
                                    "pm.request.body.raw = JSON.stringify(requestBody);"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is successful",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "// Verify relation is created with correct properties",
                                    "pm.test('Relation is created with correct properties', function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.relation_type).to.equal('KNOWS');",
                                    "    pm.expect(jsonData.from_entity).to.equal(pm.environment.get('alice_id'));",
                                    "    pm.expect(jsonData.to_entity).to.equal(pm.environment.get('bob_id'));",
                                    "    pm.expect(jsonData.properties.since).to.equal(2021);",
                                    "    // Set the relation ID for future use",
                                    "    if (jsonData.id) {",
                                    "        pm.environment.set('alice_knows_id', jsonData.id);",
                                    "        console.log('Successfully set alice_knows_id to:', jsonData.id);",
                                    "        // Verify the variable was set",
                                    "        var storedId = pm.environment.get('alice_knows_id');",
                                    "        console.log('Verified stored alice_knows_id:', storedId);",
                                    "    } else {",
                                    "        console.error('No ID in response:', jsonData);",
                                    "    }",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/relations",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "relations"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "5. Query Operations",
            "item": [
                {
                    "name": "Query All People",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Querying all people...');"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"query_spec\": {\"entity_type\": \"Person\", \"conditions\": []}}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/query",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "query"
                            ]
                        }
                    },
                    "test": [
                        "pm.test('Status code is 200', function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "pm.test('Query returns correct number of results', function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.length).to.equal(2);",
                        "});",
                        "pm.test('Query returns correct entities', function () {",
                        "    var jsonData = pm.response.json();",
                        "    var alice = jsonData.find(e => e.properties.name === 'Alice Smith');",
                        "    var bob = jsonData.find(e => e.properties.name === 'Bob Johnson');",
                        "    pm.expect(alice).to.exist;",
                        "    pm.expect(bob).to.exist;",
                        "});"
                    ]
                },
                {
                    "name": "Query Alice Smith",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Querying Alice Smith...');"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"query_spec\": {\"entity_type\": \"Person\", \"conditions\": [{\"field\": \"name\", \"operator\": \"eq\", \"value\": \"Alice Smith\"}]}}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/query",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "query"
                            ]
                        }
                    },
                    "test": [
                        "pm.test('Status code is 200', function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "pm.test('Query returns correct number of results', function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.length).to.equal(1);",
                        "});",
                        "pm.test('Query returns correct entity', function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData[0].properties.name).to.equal('Alice Smith');",
                        "    pm.expect(jsonData[0].properties.age).to.equal(30);",
                        "    pm.expect(jsonData[0].properties.occupation).to.equal('Software Engineer');",
                        "});"
                    ]
                }
            ]
        },
        {
            "name": "6. Update Operations",
            "item": [
                {
                    "name": "Update Alice's Age",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log(\"Updating Alice's age...\");",
                                    "var aliceId = pm.environment.get('alice_id');",
                                    "console.log('alice_id:', aliceId);",
                                    "if (!aliceId) {",
                                    "    console.error('alice_id is not set! Please run the Create Alice request first.');",
                                    "    return;",
                                    "}",
                                    "// Set the URL dynamically with the actual ID",
                                    "var baseUrl = pm.environment.get('base_url');",
                                    "if (!baseUrl) {",
                                    "    console.error('base_url is not set!');",
                                    "    return;",
                                    "}",
                                    "var url = baseUrl + '/api/v1/entities/' + aliceId;",
                                    "console.log('Request URL:', url);",
                                    "pm.request.url = url;"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is successful",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "// Verify entity is updated with correct properties",
                                    "pm.test('Entity is updated with correct properties', function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.properties.name).to.equal('Alice Smith');",
                                    "    pm.expect(jsonData.properties.age).to.equal(31);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"name\": \"Alice Smith\", \"age\": 31}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/entities/{{alice_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "entities",
                                "{{alice_id}}"
                            ]
                        }
                    }
                },
                {
                    "name": "Update Alice's Role",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log(\"Updating Alice's role...\");",
                                    "var aliceWorksId = pm.environment.get('alice_works_id');",
                                    "console.log('alice_works_id:', aliceWorksId);",
                                    "if (!aliceWorksId) {",
                                    "    console.error('alice_works_id is not set! Please run the Alice Works at TechCorp request first.');",
                                    "    return;",
                                    "}",
                                    "// Set the URL dynamically with the actual ID",
                                    "var baseUrl = pm.environment.get('base_url');",
                                    "if (!baseUrl) {",
                                    "    console.error('base_url is not set!');",
                                    "    return;",
                                    "}",
                                    "var url = baseUrl + '/api/v1/relations/' + aliceWorksId;",
                                    "console.log('Request URL:', url);",
                                    "pm.request.url = url;"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is successful",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "// Verify relation is updated with correct properties",
                                    "pm.test('Relation is updated with correct properties', function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.properties.role).to.equal('Principal Engineer');",
                                    "    pm.expect(jsonData.properties.start_date).to.equal(2020);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"role\": \"Principal Engineer\", \"start_date\": 2020}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/relations/{{alice_works_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "relations",
                                "{{alice_works_id}}"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "7. Delete Operations",
            "item": [
                {
                    "name": "Delete Alice Knows Bob Relation",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Deleting Alice knows Bob relation...');",
                                    "var aliceKnowsId = pm.environment.get('alice_knows_id');",
                                    "console.log('alice_knows_id:', aliceKnowsId);",
                                    "if (!aliceKnowsId) {",
                                    "    console.error('alice_knows_id is not set! Please run the Alice Knows Bob request first.');",
                                    "    return;",
                                    "}",
                                    "// Set the URL dynamically with the actual ID",
                                    "var baseUrl = pm.environment.get('base_url');",
                                    "if (!baseUrl) {",
                                    "    console.error('base_url is not set!');",
                                    "    return;",
                                    "}",
                                    "var url = baseUrl + '/api/v1/relations/' + aliceKnowsId;",
                                    "console.log('Request URL:', url);",
                                    "pm.request.url = url;"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is successful",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "url": {
                            "raw": "{{base_url}}/api/v1/relations/{{alice_knows_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "relations",
                                "{{alice_knows_id}}"
                            ]
                        }
                    }
                },
                {
                    "name": "Verify Relation Deleted",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Verifying Alice knows Bob relation is deleted...');",
                                    "var aliceKnowsId = pm.environment.get('alice_knows_id');",
                                    "console.log('alice_knows_id:', aliceKnowsId);",
                                    "if (!aliceKnowsId) {",
                                    "    console.error('alice_knows_id is not set! Please run the Alice Knows Bob request first.');",
                                    "    return;",
                                    "}",
                                    "// Set the URL dynamically with the actual ID",
                                    "var baseUrl = pm.environment.get('base_url');",
                                    "if (!baseUrl) {",
                                    "    console.error('base_url is not set!');",
                                    "    return;",
                                    "}",
                                    "var url = baseUrl + '/api/v1/relations/' + aliceKnowsId;",
                                    "console.log('Request URL:', url);",
                                    "pm.request.url = url;"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is 404 (Not Found)",
                                    "pm.test('Status code is 404', function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{base_url}}/api/v1/relations/{{alice_knows_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "relations",
                                "{{alice_knows_id}}"
                            ]
                        }
                    }
                },
                {
                    "name": "Delete Bob",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Deleting Bob...');",
                                    "var bobId = pm.environment.get('bob_id');",
                                    "console.log('bob_id:', bobId);",
                                    "if (!bobId) {",
                                    "    console.error('bob_id is not set! Please run the Create Bob request first.');",
                                    "    return;",
                                    "}",
                                    "// Set the URL dynamically with the actual ID",
                                    "var baseUrl = pm.environment.get('base_url');",
                                    "if (!baseUrl) {",
                                    "    console.error('base_url is not set!');",
                                    "    return;",
                                    "}",
                                    "var url = baseUrl + '/api/v1/entities/' + bobId;",
                                    "console.log('Request URL:', url);",
                                    "pm.request.url = url;"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is successful",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "url": {
                            "raw": "{{base_url}}/api/v1/entities/{{bob_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "entities",
                                "{{bob_id}}"
                            ]
                        }
                    }
                },
                {
                    "name": "Verify Bob Deleted",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Verifying Bob is deleted...');",
                                    "var bobId = pm.environment.get('bob_id');",
                                    "console.log('bob_id:', bobId);",
                                    "if (!bobId) {",
                                    "    console.error('bob_id is not set! Please run the Create Bob request first.');",
                                    "    return;",
                                    "}",
                                    "// Set the URL dynamically with the actual ID",
                                    "var baseUrl = pm.environment.get('base_url');",
                                    "if (!baseUrl) {",
                                    "    console.error('base_url is not set!');",
                                    "    return;",
                                    "}",
                                    "var url = baseUrl + '/api/v1/entities/' + bobId;",
                                    "console.log('Request URL:', url);",
                                    "pm.request.url = url;"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "console.log('Response:', pm.response.json());",
                                    "// Verify response is 404 (Not Found)",
                                    "pm.test('Status code is 404', function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{base_url}}/api/v1/entities/{{bob_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "entities",
                                "{{bob_id}}"
                            ]
                        }
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Initialize base_url if not set",
                    "if (!pm.environment.get('base_url')) {",
                    "    pm.environment.set('base_url', 'http://127.0.0.1:8000');",
                    "    console.log('Set base_url to:', pm.environment.get('base_url'));",
                    "}",
                    "// Clear any existing entity IDs to ensure clean state",
                    "pm.environment.unset('alice_id');",
                    "pm.environment.unset('bob_id');",
                    "pm.environment.unset('tech_corp_id');",
                    "pm.environment.unset('alice_works_id');",
                    "pm.environment.unset('bob_works_id');",
                    "pm.environment.unset('alice_knows_id');",
                    "console.log('Collection pre-request: Environment variables cleared');",
                    "// Verify environment is clean",
                    "console.log('Environment state after clearing:');",
                    "console.log('alice_id:', pm.environment.get('alice_id'));",
                    "console.log('bob_id:', pm.environment.get('bob_id'));",
                    "console.log('tech_corp_id:', pm.environment.get('tech_corp_id'));",
                    "console.log('alice_works_id:', pm.environment.get('alice_works_id'));",
                    "console.log('bob_works_id:', pm.environment.get('bob_works_id'));",
                    "console.log('alice_knows_id:', pm.environment.get('alice_knows_id'));"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Log current environment state after each request",
                    "console.log('Collection test: Current environment state:');",
                    "console.log('alice_id:', pm.environment.get('alice_id'));",
                    "console.log('bob_id:', pm.environment.get('bob_id'));",
                    "console.log('tech_corp_id:', pm.environment.get('tech_corp_id'));",
                    "console.log('alice_works_id:', pm.environment.get('alice_works_id'));",
                    "console.log('bob_works_id:', pm.environment.get('bob_works_id'));",
                    "console.log('alice_knows_id:', pm.environment.get('alice_knows_id'));"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "base_url",
            "value": "http://127.0.0.1:8000",
            "type": "string"
        }
    ]
}